####
# Aliases
####
alias s='systemctl'
alias j='journalctl'
alias p='podman'
alias v='vi'
alias lslvm='pvs && echo && vgs && echo && lvs'
alias dus='du -sh ./* | sort -h'
alias ll='ls -lisa'
alias r='sudo su'

alias findoldfiles="find . -type f -mtime +7 -printf '%TY-%Tm-%Td %TH:%TM:%TS %p\n'"
alias findnewfiles="find . -type f -mtime -7 -printf '%TY-%Tm-%Td %TH:%TM:%TS %p\n'"
function tcphosts() {
    echo "$1"
    tcpdump -nn -i any "dst port $1" -q | awk '{print $3}' | cut -d. -f1-4
}

####
# Keybinds
####
# Alt+k for navigating up in history
bind '"\ek": history-search-backward'

# Alt+j for navigating down in history
bind '"\ej": history-search-forward'

# Alt+l for moving forward one word
bind '"\el": forward-word'

# Alt+h for moving backward one word
bind '"\eh": backward-word'

# Alt+Right Arrow for moving forward one word
bind '"\e[1;3C": forward-word'

# Alt+Left Arrow for moving backward one word
bind '"\e[1;3D": backward-word'

####
# Functions
####

# Custom function to override 'sudo su'
function sudo() {
    if [[ $1 == "su" ]]; then
        # Your custom command instead of 'sudo su'
        command sudo su -c "exec bash --rcfile $BASHRC_TEMP"
    else
        # If it's not 'sudo su', use the original sudo command
        command sudo "$@"
    fi
}

#####
# Completion
####
# Ensure bash completion is loaded
if [[ -f /usr/share/bash-completion/bash_completion ]]; then
    . /usr/share/bash-completion/bash_completion
elif [[ -f /etc/bash_completion ]]; then
    . /etc/bash_completion
fi

# Source the specific systemctl completion script
if [ -f /usr/share/bash-completion/completions/systemctl ]; then
    . /usr/share/bash-completion/completions/systemctl
fi
if [ -f /usr/share/bash-completion/completions/journalctl ]; then
    . /usr/share/bash-completion/completions/journalctl
fi
if [ -f /usr/share/bash-completion/completions/podman ]; then
    . /usr/share/bash-completion/completions/podman
fi

# Enable autocompletion for the alias
complete -F _systemctl s
complete -F _journalctl j
complete -F __start_podman p

#####
# PS1
####

# Function to set the PS1 variable
function set_prompt() {
    local color
    if [ "$EUID" -eq 0 ]; then
        # Red for root
        color="\[\033[0;31m\]"
    else
        # Green for non-root users
        color="\[\033[0;32m\]"
    fi
    PS1="${color}\[\033[1m\]\u@\h:\[\033[0;34m\]\w\[\033[0m\] \$ "
}

# Call the function to set the prompt
set_prompt

# Record command start in milliseconds
trap '[[ -z "$CMD_TIMER_START" ]] && CMD_TIMER_START=$(date +%s)' DEBUG

__show_command_time() {
  if [[ -n "$CMD_TIMER_START" ]]; then
    CMD_TIMER_END=$(date +%s)
    CMD_TIMER_DIFF=$((CMD_TIMER_END - CMD_TIMER_START))
    if (( CMD_TIMER_DIFF > 2 )); then
      echo -e "\e[90mCommand took ${CMD_TIMER_DIFF}s\e[0m"
    fi
    unset CMD_TIMER_START
  fi
}

PROMPT_COMMAND="__show_command_time"
